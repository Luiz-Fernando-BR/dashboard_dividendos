# -*- coding: utf-8 -*-
"""dashboard_dividendos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lrEGJiSFOGEsRRlynabIBijkge84XkCr
"""

import yfinance as yf
import streamlit as st
from datetime import datetime, timedelta
import pandas as pd
import matplotlib.pyplot as plt

# Função para plotar o gráfico de dividendos
def plot_dividends(ticker_symbol):
    # Crie um objeto Ticker
    ticker = yf.Ticker(ticker_symbol)

    # Defina o intervalo de datas para os últimos 12 meses
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)  # 12 meses atrás

    # Converta as datas para o formato de string
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')

    # Obtenha o histórico de dados para o intervalo de datas especificado
    history_data = ticker.history(start=start_date_str, end=end_date_str)

    # Verifica se a coluna 'Dividends' existe no DataFrame
    if 'Dividends' in history_data.columns:
        # Filtrar e remover dividendos que são zero ou nulos
        filtered_dividends = history_data['Dividends'][history_data['Dividends'] > 0].dropna()

        # Formatar o índice para mostrar no eixo x como "Jan/23"
        filtered_dividends.index = filtered_dividends.index.to_series().dt.strftime("%b/%y")

        # Plotar o gráfico de barras
        fig, ax = plt.subplots(figsize=(7, 5))
        filtered_dividends.plot(kind='bar', ax=ax, rot=90)  # 'rot' é para rotacionar os rótulos do eixo x
        ax.set_title(f'Dividendos Pagos por {ticker_symbol} nos Últimos 12 Meses')
        ax.set_xlabel('Mês/Ano')
        ax.set_ylabel('Valor do Dividendo')
        st.pyplot(fig)  # Renderiza o gráfico no Streamlit

    else:
        st.write(f"Não foram encontrados dividendos para {ticker_symbol} nos últimos 12 meses.")

# Interface com Streamlit
st.title("Análise de dividendos dos últimos 12 meses considerando um DY de no mínimo 6%")

# Configurações da sidebar com caixa de texto para input do código da ação
ticker_symbol = st.sidebar.text_input("Digite o código da ação", value="")

# Adicionando um botão "OK" na sidebar
if st.sidebar.button("OK"):
    # Garantir que o código da ação termine com ".SA"
    if not ticker_symbol.endswith(".SA"):
        ticker_symbol += ".SA"

    # Criando um objeto Ticker
    ticker = yf.Ticker(ticker_symbol)

    # Defina o intervalo de datas para os últimos 12 meses
    end_date = datetime.now()
    start_date = end_date - timedelta(days=365)  # 12 meses atrás

    # Converta as datas para o formato de string
    start_date_str = start_date.strftime('%Y-%m-%d')
    end_date_str = end_date.strftime('%Y-%m-%d')

    # Obtenha o histórico de dados para os últimos 12 meses
    history_data = ticker.history(start=start_date_str, end=end_date_str)

    # Verifica se a coluna 'Dividends' existe no DataFrame
    if 'Dividends' in history_data.columns:
        # Filtrar e remover dividendos que são zero ou nulos
        filtered_dividends = history_data['Dividends'][history_data['Dividends'] > 0].dropna()

        # Exibir os dividendos como uma tabela
        st.subheader(f"Dividendos de {ticker_symbol} nos últimos 12 meses")
        st.dataframe(filtered_dividends)

        # Somar os dividendos filtrados
        total_dividends = filtered_dividends.sum()
        st.write(f"**Dividendos totais pagos por {ticker_symbol} nos últimos 12 meses: R${total_dividends:.2f}**")

        # Calcular o preço máximo que poderia pagar pela ação
        max_price = total_dividends / 0.06
        st.write(f"**O preço máximo sugerido que você poderia pagar por essa ação é: R${max_price:.2f}**")

        # Plotar o gráfico de dividendos
        plot_dividends(ticker_symbol)

    else:
        st.write(f"Não foram encontrados dividendos para {ticker_symbol} nos últimos 12 meses.")